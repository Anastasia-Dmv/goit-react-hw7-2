{"ast":null,"code":"import { combineReducers } from \"redux\"; //import actionTypes from \"./contact-types\";\n\nimport actionTypes from \"./contact-actions\";\nimport contactsActions from \"../../components/contactsOperations/contactsOperation\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport contactsOperation from \"../../components/contactsOperations/contactsOperation\";\nconst items = createReducer([], {\n  [contactsActions.addContactSuccess]: (state, action) => [...state, action.payload],\n  [actionTypes.deleteContact]: (state, action) => state.filter(contact => contact.id !== action.payload),\n  [actionTypes.saveInStorage]: (state, action) => action.payload\n});\nconst filter = createReducer(\"\", {\n  [actionTypes.changeFilter]: (state, action) => action.payload\n});\nconst loading = createReducer(false, {\n  [contactsActions.addContactRequest]: () => true\n}); // {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n// export const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.addContact.type:\n//       return [...state, payload.contact];\n//     case actionTypes.deleteContact.type:\n//       return state.filter((contact) => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// export const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.changeFilter.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter\n});","map":{"version":3,"sources":["/Users/anastasia/Documents/React-BC-22/goit-react-hw-06-phonebook/src/redux/contact/contact-reducer.js"],"names":["combineReducers","actionTypes","contactsActions","createReducer","contactsOperation","items","addContactSuccess","state","action","payload","deleteContact","filter","contact","id","saveInStorage","changeFilter","loading","addContactRequest"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,eAAP,MAA4B,uDAA5B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,iBAAP,MAA8B,uDAA9B;AAEA,MAAMC,KAAK,GAAGF,aAAa,CAAC,EAAD,EAAK;AAC9B,GAACD,eAAe,CAACI,iBAAjB,GAAqC,CAACC,KAAD,EAAQC,MAAR,KAAmB,CACtD,GAAGD,KADmD,EAEtDC,MAAM,CAACC,OAF+C,CAD1B;AAK9B,GAACR,WAAW,CAACS,aAAb,GAA6B,CAACH,KAAD,EAAQC,MAAR,KAC3BD,KAAK,CAACI,MAAN,CAAcC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeL,MAAM,CAACC,OAAhD,CAN4B;AAO9B,GAACR,WAAW,CAACa,aAAb,GAA6B,CAACP,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC;AAPzB,CAAL,CAA3B;AAUA,MAAME,MAAM,GAAGR,aAAa,CAAC,EAAD,EAAK;AAC/B,GAACF,WAAW,CAACc,YAAb,GAA4B,CAACR,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC;AADvB,CAAL,CAA5B;AAIA,MAAMO,OAAO,GAAGb,aAAa,CAAC,KAAD,EAAQ;AACnC,GAACD,eAAe,CAACe,iBAAjB,GAAqC,MAAM;AADR,CAAR,CAA7B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAejB,eAAe,CAAC;AAC7BK,EAAAA,KAD6B;AAE7BM,EAAAA;AAF6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\n//import actionTypes from \"./contact-types\";\nimport actionTypes from \"./contact-actions\";\nimport contactsActions from \"../../components/contactsOperations/contactsOperation\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport contactsOperation from \"../../components/contactsOperations/contactsOperation\";\n\nconst items = createReducer([], {\n  [contactsActions.addContactSuccess]: (state, action) => [\n    ...state,\n    action.payload,\n  ],\n  [actionTypes.deleteContact]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload),\n  [actionTypes.saveInStorage]: (state, action) => action.payload,\n});\n\nconst filter = createReducer(\"\", {\n  [actionTypes.changeFilter]: (state, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [contactsActions.addContactRequest]: () => true,\n});\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n// export const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.addContact.type:\n//       return [...state, payload.contact];\n//     case actionTypes.deleteContact.type:\n//       return state.filter((contact) => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// export const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.changeFilter.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n});\n"]},"metadata":{},"sourceType":"module"}