{"ast":null,"code":"import { combineReducers } from \"redux\"; //import actionTypes from \"./contact-types\";\n\nimport actionTypes from \"./contact-actions\";\nimport contactsActions from \"../../components/contactsOperations/contactsOperation\";\nimport { createReducer } from \"@reduxjs/toolkit\"; //import contactsOperation from \"../../components/contactsOperations/contactsOperation\";\n\nconst items = createReducer([], {\n  [actionTypes.fetchContactsRequest]: (state, action) => action.payload,\n  [contactsActions.addContactSuccess]: (state, action) => [...state, action.payload],\n  [actionTypes.deleteContact]: (state, action) => state.filter(contact => contact.id !== action.payload) //[actionTypes.saveInStorage]: (state, action) => action.payload,\n\n});\nconst filter = createReducer(\"\", {\n  [actionTypes.changeFilter]: (state, action) => action.payload\n});\nconst loading = createReducer(false, {\n  [actionTypes.addContactRequest]: () => true,\n  [actionTypes.addContactSuccess]: () => false,\n  [actionTypes.addContactError]: () => false\n}); // {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n// export const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.addContact.type:\n//       return [...state, payload.contact];\n//     case actionTypes.deleteContact.type:\n//       return state.filter((contact) => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// export const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.changeFilter.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n  loading\n});","map":{"version":3,"sources":["/Users/anastasia/Documents/React-BC-22/goit-react-hw-06-phonebook/src/redux/contact/contact-reducer.js"],"names":["combineReducers","actionTypes","contactsActions","createReducer","items","fetchContactsRequest","state","action","payload","addContactSuccess","deleteContact","filter","contact","id","changeFilter","loading","addContactRequest","addContactError"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,eAAP,MAA4B,uDAA5B;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;;AAEA,MAAMC,KAAK,GAAGD,aAAa,CAAC,EAAD,EAAK;AAC9B,GAACF,WAAW,CAACI,oBAAb,GAAoC,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OADhC;AAE9B,GAACN,eAAe,CAACO,iBAAjB,GAAqC,CAACH,KAAD,EAAQC,MAAR,KAAmB,CACtD,GAAGD,KADmD,EAEtDC,MAAM,CAACC,OAF+C,CAF1B;AAM9B,GAACP,WAAW,CAACS,aAAb,GAA6B,CAACJ,KAAD,EAAQC,MAAR,KAC3BD,KAAK,CAACK,MAAN,CAAcC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACC,OAAhD,CAP4B,CAQ9B;;AAR8B,CAAL,CAA3B;AAWA,MAAMG,MAAM,GAAGR,aAAa,CAAC,EAAD,EAAK;AAC/B,GAACF,WAAW,CAACa,YAAb,GAA4B,CAACR,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC;AADvB,CAAL,CAA5B;AAIA,MAAMO,OAAO,GAAGZ,aAAa,CAAC,KAAD,EAAQ;AACnC,GAACF,WAAW,CAACe,iBAAb,GAAiC,MAAM,IADJ;AAEnC,GAACf,WAAW,CAACQ,iBAAb,GAAiC,MAAM,KAFJ;AAGnC,GAACR,WAAW,CAACgB,eAAb,GAA+B,MAAM;AAHF,CAAR,CAA7B,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAejB,eAAe,CAAC;AAC7BI,EAAAA,KAD6B;AAE7BO,EAAAA,MAF6B;AAG7BI,EAAAA;AAH6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\n//import actionTypes from \"./contact-types\";\nimport actionTypes from \"./contact-actions\";\nimport contactsActions from \"../../components/contactsOperations/contactsOperation\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n//import contactsOperation from \"../../components/contactsOperations/contactsOperation\";\n\nconst items = createReducer([], {\n  [actionTypes.fetchContactsRequest]: (state, action) => action.payload,\n  [contactsActions.addContactSuccess]: (state, action) => [\n    ...state,\n    action.payload,\n  ],\n  [actionTypes.deleteContact]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload),\n  //[actionTypes.saveInStorage]: (state, action) => action.payload,\n});\n\nconst filter = createReducer(\"\", {\n  [actionTypes.changeFilter]: (state, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [actionTypes.addContactRequest]: () => true,\n  [actionTypes.addContactSuccess]: () => false,\n  [actionTypes.addContactError]: () => false,\n});\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n// export const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.addContact.type:\n//       return [...state, payload.contact];\n//     case actionTypes.deleteContact.type:\n//       return state.filter((contact) => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// export const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.changeFilter.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n"]},"metadata":{},"sourceType":"module"}