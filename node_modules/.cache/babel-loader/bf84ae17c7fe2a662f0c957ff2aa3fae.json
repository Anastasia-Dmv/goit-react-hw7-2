{"ast":null,"code":"import { combineReducers } from \"redux\"; //import actionTypes from \"./contact-types\";\n\nimport actionTypes from \"./contact-actions\"; //import contactsActions from \"../contactsOperations/contactsOperation\";\n\nimport { createReducer } from \"@reduxjs/toolkit\"; //import contactsOperation from \"../../components/contactsOperations/contactsOperation\";\n\nconst items = createReducer([], {\n  [actionTypes.fetchContactsSuccess]: (state, action) => action.payload,\n  [actionTypes.addContactSuccess]: (state, action) => [...state, action.payload],\n  [actionTypes.removeContactSuccess]: (state, action) => state.filter(contact => contact.id !== action.payload) //[actionTypes.saveInStorage]: (state, action) => action.payload,\n\n});\nconst filter = createReducer(\"\", {\n  [actionTypes.changeFilter]: (state, action) => action.payload\n});\nconst loading = createReducer(false, {\n  [actionTypes.addContactRequest]: () => true,\n  [actionTypes.addContactSuccess]: () => false,\n  [actionTypes.addContactError]: () => false,\n  [actionTypes.removeContactRequest]: () => true,\n  [actionTypes.removeContactSuccess]: () => false,\n  [actionTypes.removeContactError]: () => false\n}); // {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n// export const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.addContact.type:\n//       return [...state, payload.contact];\n//     case actionTypes.deleteContact.type:\n//       return state.filter((contact) => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// export const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.changeFilter.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n  loading\n});","map":{"version":3,"sources":["/Users/anastasia/Documents/React-BC-22/goit-react-hw-06-phonebook/src/redux/contact/contact-reducer.js"],"names":["combineReducers","actionTypes","createReducer","items","fetchContactsSuccess","state","action","payload","addContactSuccess","removeContactSuccess","filter","contact","id","changeFilter","loading","addContactRequest","addContactError","removeContactRequest","removeContactError"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CACA;;AAEA,MAAMC,KAAK,GAAGD,aAAa,CAAC,EAAD,EAAK;AAC9B,GAACD,WAAW,CAACG,oBAAb,GAAoC,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OADhC;AAE9B,GAACN,WAAW,CAACO,iBAAb,GAAiC,CAACH,KAAD,EAAQC,MAAR,KAAmB,CAClD,GAAGD,KAD+C,EAElDC,MAAM,CAACC,OAF2C,CAFtB;AAM9B,GAACN,WAAW,CAACQ,oBAAb,GAAoC,CAACJ,KAAD,EAAQC,MAAR,KAClCD,KAAK,CAACK,MAAN,CAAcC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACC,OAAhD,CAP4B,CAQ9B;;AAR8B,CAAL,CAA3B;AAWA,MAAMG,MAAM,GAAGR,aAAa,CAAC,EAAD,EAAK;AAC/B,GAACD,WAAW,CAACY,YAAb,GAA4B,CAACR,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC;AADvB,CAAL,CAA5B;AAIA,MAAMO,OAAO,GAAGZ,aAAa,CAAC,KAAD,EAAQ;AACnC,GAACD,WAAW,CAACc,iBAAb,GAAiC,MAAM,IADJ;AAEnC,GAACd,WAAW,CAACO,iBAAb,GAAiC,MAAM,KAFJ;AAGnC,GAACP,WAAW,CAACe,eAAb,GAA+B,MAAM,KAHF;AAInC,GAACf,WAAW,CAACgB,oBAAb,GAAoC,MAAM,IAJP;AAKnC,GAAChB,WAAW,CAACQ,oBAAb,GAAoC,MAAM,KALP;AAMnC,GAACR,WAAW,CAACiB,kBAAb,GAAkC,MAAM;AANL,CAAR,CAA7B,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAelB,eAAe,CAAC;AAC7BG,EAAAA,KAD6B;AAE7BO,EAAAA,MAF6B;AAG7BI,EAAAA;AAH6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\n//import actionTypes from \"./contact-types\";\nimport actionTypes from \"./contact-actions\";\n//import contactsActions from \"../contactsOperations/contactsOperation\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n//import contactsOperation from \"../../components/contactsOperations/contactsOperation\";\n\nconst items = createReducer([], {\n  [actionTypes.fetchContactsSuccess]: (state, action) => action.payload,\n  [actionTypes.addContactSuccess]: (state, action) => [\n    ...state,\n    action.payload,\n  ],\n  [actionTypes.removeContactSuccess]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload),\n  //[actionTypes.saveInStorage]: (state, action) => action.payload,\n});\n\nconst filter = createReducer(\"\", {\n  [actionTypes.changeFilter]: (state, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [actionTypes.addContactRequest]: () => true,\n  [actionTypes.addContactSuccess]: () => false,\n  [actionTypes.addContactError]: () => false,\n  [actionTypes.removeContactRequest]: () => true,\n  [actionTypes.removeContactSuccess]: () => false,\n  [actionTypes.removeContactError]: () => false,\n});\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n// export const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.addContact.type:\n//       return [...state, payload.contact];\n//     case actionTypes.deleteContact.type:\n//       return state.filter((contact) => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// export const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.changeFilter.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n"]},"metadata":{},"sourceType":"module"}